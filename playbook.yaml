---
- name: Linux Health Check
  hosts: all
  tasks:
    - name: Ping my hosts
      ansible.builtin.ping:

    - name: Linux platform
      assert:
        that:
          - ansible_system == "Linux"
        fail_msg: "This playbook only supports Linux systems"
        success_msg: "This is a Linux system"

    - name: OS information
      debug:
        msg: "{{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: Disk free space
      assert:
        that:
          - mount.size_available > mount.size_total|float * 0.25
        fail_msg: Disk space on {{ mount }} has reached 75% threshold
        success_msg: "Disk space on {{ mount }} is less than 75%"
        quiet: true
      vars:
        mount: "{{ ansible_mounts | selectattr('mount','equalto',item.mount) | list | first }}"
      with_items:
        - "{{ ansible_mounts }}"
      ignore_errors: true

    - name: Memory usage
      assert:
        that:
          - ansible_memory_mb.nocache.used < ansible_memtotal_mb|float * 0.75
        fail_msg: "Memory usage is over 75%"
        success_msg: "Memory usage is under 75%"
      ignore_errors: true

    - name: Swap
      assert:
        that:
          - ansible_memory_mb.swap.used > ansible_memory_mb.swap.total|float * 0.25
        fail_msg: "Swap usage is over 25%"
        success_msg: "Swap usage is under 25%"
      ignore_errors: true

    - name: Load average
      assert:
        that:
          - ansible_loadavg['15m'] / ansible_processor_cores < 1
        fail_msg: "Load average is greater than 1 per CPU core"
        success_msg: "Load average is less than 1 per CPU core"
      ignore_errors: true

    - name: List zombie processes
      ansible.builtin.shell: top -b1 -n1 | grep Z | wc -l
      register: command_result
      changed_when: false
    - name: Count zombie processes
      assert:
        that:
          command_result.stdout|int == 0
        fail_msg: Zombie check failed, {{ command_result.stdout }} zombie processes
        success_msg: Zombie processes check passed
      ignore_errors: true

    - name: Get firewalld status
      ansible.builtin.systemd:
        name: "firewalld"
      register: firewalld

    - name: Get ufw status
      ansible.builtin.systemd:
        name: "ufw"
      register: ufw

    - name: Get iptables status
      ansible.builtin.systemd:
        name: "iptables"
      register: iptables

    - name: Check Red Hat firewall running
      when: ansible_os_family == "RedHat"
      assert:
        that: (firewalld.status.SubState == 'running') or (iptables.status.SubState == 'running')
        fail_msg: Firewall is not running
        success_msg: Firewall is running
      ignore_errors: true

    - name: Check Debian firewall running
      when: ansible_os_family == "Debian"
      assert:
        that: (iptables.status.SubState == 'running') or (ufw.status.SubState == 'running')
        fail_msg: Firewall is not running
        success_msg: Firewall is running
      ignore_errors: true

    - name: Check for dnf updates
      ansible.builtin.shell: "dnf check-update --quiet | wc -l"
      register: dnf_updates
      when: ansible_os_family == "RedHat"
      changed_when: false
      ignore_errors: true

    - name: Count dnf updates
      when: ansible_os_family == "RedHat"
      assert:
        that:
          dnf_updates.stdout|int == 0
        fail_msg: "{{ dnf_updates.stdout }} outstanding updates"
        success_msg: No outstanding updates
      ignore_errors: true

    - name: Check for apt updates
      ansible.builtin.shell: "apt list --upgradable --quiet | wc -l"
      register: apt_updates
      when: ansible_pkg_mgr == "apt"
      changed_when: false
      ignore_errors: true

    - name: Count apt updates
      when: ansible_pkg_mgr == "apt"
      assert:
        that:
          apt_updates.stdout|int == 0
        fail_msg: "{{ dnf_updates.stdout }} outstanding updates"
        success_msg: No outstanding updates
      ignore_errors: true

    - name: SMART disk health
      when: ansible_virtualization_role == "host"
      ansible.builtin.shell: "smartctl -H /dev/{{ device }}"
      become: true
      vars:
        device: "{{ ansible_devices.keys() | list | first }}"
      with_items:
        - "{{ ansible_devices }}"
      ignore_errors: true
      changed_when: false

    - name: Get SELinux status
      when: ansible_os_family == "RedHat"
      ansible.builtin.shell: getenforce
      register: getenforce
      ignore_errors: true
      changed_when: false

    - name: Check SELinux status
      assert:
        that: getenforce.stdout == "Enforcing"
        fail_msg: "SELinux is {{ getenforce.stdout }}"
        success_msg: SELinux is Enforcing
      ignore_errors: true

    - name: Check if reboot is needed on Ubuntu
      when: ansible_os_family == "Debian"
      stat: path=/var/run/reboot-required
      register: check_reboot

    - name: Check if reboot is needed on Ubuntu
      when: ansible_os_family == "Debian"
      assert:
        that: not check_reboot.stat.exists
        fail_msg: Reboot needed
        success_msg: Reboot not needed
      ignore_errors: true

    - name: Check if reboot is needed on Red Hat
      when: ansible_os_family == "RedHat"
      ansible.builtin.command: needs-restarting -r
      ignore_errors: true
      failed_when: false
      changed_when: false

    - name: Get iowait
      ansible.builtin.shell: top -b1 -n1 -1 | grep '%Cpu' | cut -d ' ' -f 14
      register: iowait
      ignore_errors: true
      changed_when: false

    - name: Check iowait
      assert:
        that: iowait.stdout|float < 10
        fail_msg: iowait is {{ iowait.stdout }}
        success_msg: iowait is not excessive

    - name: Secrets in environment
      assert:
        that:
          - "'SECRET' not in item"
          - "'PASS' not in item"
          - "'TOKEN' not in item"
        fail_msg: Environment variable {{ item }} may contain a secret
      with_items: "{{ ansible_env.keys() }}"
      ignore_errors: true

    - name: Get systemd failed units
      ansible.builtin.shell: systemctl list-units --failed -q | wc -l
      register: failed_units
      ignore_errors: true
      changed_when: false

    - name: Check systemd failed units
      assert:
        that: failed_units|int == 0
        fail_msg: "{{ failed_units }} failed systemd units"
        success_msg: No failed systemd units
      ignore_errors: true